composer create-project laravel/laravel example-app
ARTISAN : CTRL SHIFT P

php artisan serve

php artisan migrate

// jalankan migrasi
php artisan migrate

// tambah file migration
php artisan make:migration create_students_table

//tambah kolom ke tabel migrasi
php artisan make:migration add_gender_colum_to_students_table

// rollback pada state/batch migrate sebelumnya
php artisan migrate:rollback
tambahkan --step=2 , berapa state yang dihapus

// merubah kolom pada tabel , tambahkan method ->change() , pada function up and down
// membutuhkan doctrine/dbal
// note untuk ->nullabel() menjadi ->nullabel(false) ketika down
composes require doctrine/dbal
php artisan make:migration change_gender_attributes_in_students_table

// menambakan relasi foreign key ke table yang sudah ada
php artisan make:migration add_class_id_colum_to_students_table
$table->unsignedBigInteger('class_id')->required();
$table->foreign('class_id')->references('id')->on('class');
// untuk drop nya
// untuk rule supaya class tidak bisa di hapus jika masih ada yang mererensikan
->onDelete('restrict');

// membuat Model
php artisan make:model Student
// memberitahu laravel bahwa model memiliki database
protected $table = 'students';
// memberitahu laravel model primary key dari database
protected $primaryKey = 'student_id';
// memberitahu laravel model primary key dari database bukan int
protected $keyType = 'string';
// table timestamp dihapus
protected $timestamps = false;

//controller
php artisan make:controller StudentController

php artisan make:migration add_unique_rule_in_class_table

// role table
/untuk up
$table->string('name')->unique()->change();
//untuk down
$table->dropUnique('class_name_unique');


//seeding
php artisan make:seeder ClassRoomSeeder
php artisan db:seed --class=ClassRoomSeeder

// seeding secara bersamaa
php artisan db:seed

// faker
composer require fakerphp/faker

// relation
student -> class
many to one
class -> student
one to many

// many to many
php artisan make:migration create_extracurriculars_table
//membuat tabel pivot
php artisan make:migration create_student_extracurricular_table

// nested relationship

// validation
php artisan make:request StudentCreateRequest

// soft delete
    use SoftDeletes;

// paginate


// add image
php artisan make:migration add_image_column_to_students_table

FILESYSTEM_DISK=local
FILESYSTEM_DISK=public // ini
https://laravel.com/docs/9.x/filesystem

folder storage di hubungkan dengan folder public
php artisan storage:link


// users dengan role
php artisan make:migration create_roles_table
php artisan make:seeder RoleSeeder
php artisan make:model Role
php artisan db:seed --class=RoleSeeder

php artisan make:migration add_role_id_column_to_users_table

// menggunakan middlewere
php artisan make:controller AuthController


// ketika sudah login , prevent login page
kernel -> guest


// middlewere untuk role
bisa menggunakan :
spatie - role permission
policy - laravel
middlewere
php artisan make:middleware MustAdmin


// blade templating
php artisan make:component Alert


// slug
php artisan make:migration add_slug_column_to_students_table

https://github.com/cviebrock/eloquent-sluggable

composer require cviebrock/eloquent-sluggable:^9.0


// debugging laravel atau loging
APP_DEBUG=false
https://github.com/opcodesio/log-viewer
http://127.0.0.1:8000/log-viewer

// UUID


// array chunk
seeder untuk memasukan 10000 data denga cepat

$faker = Factory::create();
for($i=0; $i < 10000; $i++){
    $data[] = [
        'name' => $faker->name(),
        'gender' => Arr::random(['L','P']),
        'nis' => mt_rand(00001,99999),
        'class_id' => Arr::random(['1','2','3','4'])
    ]
};

foreach(array_chunk($data,1000) as $item){
    Student::insert($item);
}

// Accessor dan mutator setter getter
https://laravel.com/docs/10.x/eloquent-mutators


// mailer

mengirim email sampai mengirim email terkirim

https://mailtrap.io/inboxes/2111604/messages

php artisan make:mail TestSendEmail


// laravel events untuk log activity
https://laravel.com/docs/10.x/eloquent#events-using-closures

// event listener // observer
jika banyak events gunakan observer
php artisan make:observer StudentObserver --model=Student

To register an observer, you need to call the observe method on the model you wish to observe. You may register observers in the boot method of your application's App\Providers\EventServiceProvider service provider:

// event listener // multiple listener
https://laravel.com/docs/10.x/events#introduction
php artisan make:event TeacherCreated

// email queque
https://laravel.com/docs/10.x/mail#queueing-mail
https://laravel.com/docs/10.x/queues

buat job terlebih dahulu
https://laravel.com/docs/10.x/queues#creating-jobs

https://laravel.com/docs/10.x/queues#max-attempts
https://laravel.com/docs/10.x/queues#driver-prerequisites

dispatch data dari controller

php artisan queue:work

// multipler guards

table teacher bisa di tambahkan
config/auth.php
tambahkan
auth::guard('teacher')

// polymorphic relationship one to one
https://laravel.com/docs/10.x/eloquent-relationships#polymorphic-relationships
contohnya table User dan Post memiliki banyak gambar tapi hanya ingin 1 model database (Image)
maka dapat dibuat menggunakan 1 table saja , hanya butuh kolom
    imageable_id - integer
    imageable_type - string
id dari user/post dan nama Model User/Post


// rate limiter
https://laravel.com/docs/10.x/rate-limiting#main-content
https://laravel.com/docs/10.x/routing#rate-limiting


// excel export
php artisan make:model Country -m -c
php artisan make:model City -m -c
https://laravel-excel.com/
extension:gd //php.ini
php artisan make:export UsersExport --model=User
melakukan query data
https://docs.laravel-excel.com/3.1/exports/from-query.html

untuk form view
https://docs.laravel-excel.com/3.1/exports/from-view.html

// excel import
php artisan make:import CityImport --model=City
https://docs.laravel-excel.com/3.1/imports/model.html
dengan heading
https://docs.laravel-excel.com/3.1/imports/heading-row.html
dengan collection supaya bisa input string
https://docs.laravel-excel.com/3.1/imports/collection.html


// upsert
singkatan dari =
jika data tidak ada = create , jika data ada = create
mirip seperti if else
$flight = Flight::updateOrCreate(
    // jika data terpenuhi dan data ada di database
    ['departure' => 'Oakland', 'destination' => 'San Diego'],
    // maka lakukan hal berikut
    ['price' => 99, 'discounted' => 1]
);

// ganti password dengan validasi


// export untuk dom pdf
https://github.com/barryvdh/laravel-dompdf

